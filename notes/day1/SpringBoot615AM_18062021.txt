				Date : 18-Jun-21
				Spring Boot 6:15AM
				   Mr. RAGHU
		----------------------------------------------------
Reference:-
https://www.youtube.com/watch?v=rgG2_T-OB8g

			  Mini Project (crud) : Spring Boot
	  [ Web Mvc + Thymeleaf + Data JPA + MySQL + DevTools + Lombok ]

Layers(3):- 
a. Presentation Layer (PL) : Display final result to enduser/read data from EndUser.
				UI : User Interface
b. Service Layer (SL) : Calculation, Operations, Logics...etc
c. Data Access Layer (DAL) : Database Operations (INSERT,UPDATE,DELETE..etc).

*) Within layer IS-A (Inheritance) is used, between layers HAS-A (Association)
   is used.

==========(code)=============================================================
S#1 Create new Starter project
Name : SpringBoot2WebMvcMySQLCrudEx
Dep  : Web, DevTools, Data JPA, Lombok, MySQL, Thymeleaf

S#2 -----------application.properties----------------
#Server port
server.port=8081

#Database connection
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/boot615am
spring.datasource.username=root
spring.datasource.password=root

# ORM Properties
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
-----------------------------------------------------------------------
S#3 Code Files
a. Model class

package in.nareshit.raghu.model;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Data;

@Data
@Entity
@Table(name="emptab")
public class Employee {
	@Id
	@Column(name="eid")
	@GeneratedValue(strategy = GenerationType.IDENTITY)//auto increment
	private Integer empId;
	
	@Column(name="ename")
	private String empName;
	
	@Column(name="esal")
	private Double empSal;
	
	@Column(name="edept")
	private String empDept;

	@Column(name="ehra")
	private Double empHra;
	
	@Column(name="eta")
	private Double empTa;
	
}
----------------------------------------------------------

b. Repository

package in.nareshit.raghu.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import in.nareshit.raghu.model.Employee;

public interface EmployeeRepository 
	extends JpaRepository<Employee, Integer> {

}

---------------------------
c. Service Interface


package in.nareshit.raghu.service;

import java.util.List;
import java.util.Optional;

import in.nareshit.raghu.model.Employee;

public interface IEmployeeService {

	Integer saveEmployee(Employee e);
	void updateEmployee(Employee e);
	void deleteEmployee(Integer id);
	
	Optional<Employee> getOneEmployee(Integer id);
	List<Employee> getAllEmployees();
}

---------------------------
d. Service Impl
package in.nareshit.raghu.service.impl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import in.nareshit.raghu.model.Employee;
import in.nareshit.raghu.repo.EmployeeRepository;
import in.nareshit.raghu.service.IEmployeeService;

@Service
public class EmployeeServiceImpl implements IEmployeeService {

	@Autowired
	private EmployeeRepository repo;

	public Integer saveEmployee(Employee e) {
		// Local variable Type inference(DataType is decided by Java Compiler)
		var esal = e.getEmpSal();
		var hra = esal * 20/100.0;
		var ta = esal * 10/100.0;

		//set data back to object
		e.setEmpHra(hra);
		e.setEmpTa(ta);

		//save object 
		var id = repo.save(e).getEmpId();

		return id;
	}


	public void updateEmployee(Employee e) {
		//if given id exist in db then update
		if(repo.existsById(e.getEmpId())) {
			var esal = e.getEmpSal();
			var hra = esal * 20/100.0;
			var ta = esal * 10/100.0;

			//set data back to object
			e.setEmpHra(hra);
			e.setEmpTa(ta);
			repo.save(e);
		}
	}


	public void deleteEmployee(Integer id) {
		repo.deleteById(id);
	}


	public Optional<Employee> getOneEmployee(Integer id) {
		return repo.findById(id);
	}


	public List<Employee> getAllEmployees() {
		List<Employee> emps = repo.findAll();
		return emps
				.stream()
				.sorted(
						//(e1,e2)->e1.getEmpId().compareTo(e2.getEmpId()) //ASC
						(e1,e2)->e2.getEmpId().compareTo(e1.getEmpId()) //DESC
						)
				.collect(Collectors.toList());
	}

}

------------------------------------------------------------------
e. Controller

package in.nareshit.raghu.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import in.nareshit.raghu.model.Employee;
import in.nareshit.raghu.service.IEmployeeService;

@Controller
@RequestMapping("/employee")
public class EmployeeController {

	@Autowired
	private IEmployeeService service;
	
	//1. show Register page
	/**
	 * If End user enters /register, GET type
	 *  then we should display one Register page in browser
	 */
	@GetMapping("/register")
	public String showReg() {
		return "EmployeeRegister";
	}
	
	//2. save() : Click Form submit
	@PostMapping("/save")
	public String saveEmp(
			@ModelAttribute Employee employee,
			Model model
			) 
	{
		Integer id = service.saveEmployee(employee);
		String mesage = "Employee '"+id+"' created!!";
		model.addAttribute("message", mesage);
		return "EmployeeRegister";
	}
	
	//3. display all rows 
	@GetMapping("/all")
	public String getAllEmps(Model model) {
		List<Employee> emps = service.getAllEmployees();
		model.addAttribute("list", emps);
		return "EmployeeData";
	}
	
	//4. Delete by id
	
	//5. Show Data in Edit (by id)
	
	//6. Update data
}

------------------------------------------------------------
f. UI Pages

--EmployeeRegister.html-----------
<html xmlns:th="https://www.thymeleaf.org/">
<head></head>
<body>
<h3>EMPLOYEE REGISTER PAGE</h3>
<form th:action="@{/employee/save}" method="POST">
<pre>
NAME : <input type="text" name="empName" id="empName"/>
SAL  : <input type="number" name="empSal" id="empSal"/>
DEPT : <select name="empDept" id="empDept">
			<option value="">--SELECT--</option>
			<option value="DEV">DEV</option>
			<option value="QA">QA</option>
			<option value="BA">BA</option>
		</select>
	<input type="submit" value="ADD EMPLOYEE"/>		
</pre>
</form>
<span th:text="${message}"></span>
</body>
</html>

---------EmployeeData.html---------------------
<html xmlns:th="https://www.thymeleaf.org/">
<head></head>
<body>
<h3>EMPLOYEE DATA PAGE</h3>
<table border="1">
	<tr>
		<th>ID</th>
		<th>NAME</th>
		<th>SAL</th>
		<th>DEPT</th>
		<th>HRA</th>
		<th>TA</th>
		<th>OPERATIONS</th>
	</tr>
	<tr th:each="ob:${list}">
		<td th:text="${ob.empId}"></td>
		<td th:text="${ob.empName}"></td>
		<td th:text="${ob.empSal}"></td>
		<td th:text="${ob.empDept}"></td>
		<td th:text="${ob.empHra}"></td>
		<td th:text="${ob.empTa}"></td>
		<td>
			<a  href="#">DELETE</a> | <a href="#">EDIT</a>   
		</td>
	</tr>
</table>
</body>
</html>
----------------------------------------------------

*) Run Application and Enter URL as:
http://localhost:8081/employee/register
http://localhost:8081/employee/all
--------------------------------------------------------------
SQLSyntaxErrorException: Unknown database 'boot615am'
mysql> create database boot615am; (at mysql db)
mysql> use boot615am;
mysql> show tables;

------Core Java--------------------------------------
Q) What is var ? When is it added in Java?
A) 
   Local variable type inference.

	var a=10;  .. Compiler..  ==> int a=10
      

Q) How can we sort List<T> using Java 8 Stream API?
   (use Comparator , finall get same List<T>)
A)
   List<Employee> emps = repo.findAll();
    emps.stream()
		.sorted(
			//(e1,e2)->e1.getEmpId().compareTo(e2.getEmpId()) //ASC
			(e1,e2)->e2.getEmpId().compareTo(e1.getEmpId()) //DESC
		)
	.collect(Collectors.toList());

--------------------------------------------
Service -- claculation, Operations/logics, Transaction Management..etc

Dao -- class -- DB Operations [Repository]
Dto -- Object of Entity/Model class used to trasfer data b/w layers.
	Controller ---> object (DTO)---> service---> object --> Repository